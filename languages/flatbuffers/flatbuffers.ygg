grammar flatbuffers {
    patterns: ('*.fbs')
}

class Root {
    Statement* EOI
}

union Statement {
    | ImportStatement
    | MessageStatement
    | EnumStatement
    | ServiceStatement
}
// === import === -----------------------------------------------------------------------------------------------------
class ImportStatement {
    ^KW_IMPORT String
}
// === message === -----------------------------------------------------------------------------------------------------
class MessageStatement {
    ^KW_MESSAGE Identifier '{' MessageTerm* '}'
}
union MessageTerm {
    | MessageStatement
    | MessageField
    | MessageReserved
    | EnumStatement
    | [;]
}
class MessageField {
    KW_REPEATED? TypeHint field:Identifier '=' Integer
}
class MessageReserved {
    ^KW_RESERVED
}
// === enum === -----------------------------------------------------------------------------------------------------

class EnumStatement {
    ^KW_ENUM Identifier '{' MessageTerm* '}'
}
// option allow_alias = true;
union EnumTerm {
    | EnumPair
}
class EnumPair {
    Identifier '=' Integer
}
// === serverse === -----------------------------------------------------------------------------------------------------
class ServiceStatement {
    ^KW_SERVICE Identifier '{' MessageTerm* '}'
}



// === type === -----------------------------------------------------------------------------------------------------

union TypeHint {
    | Map
    | Namepath
}
class Map {
    'map' '<' key:Identifier ',' value:Identifier '>'
}

// === identifier === --------------------------------------------------------------------------------------------------
class Namepath {
    Identifier ('.' Identifier)*
}
class Identifier {
    /[_\p{XID_start}]\p{XID_continue}*/
}
// === number === ----------------------------------------------------------------------------------------------------
class Integer {
    /0|[1-9][0-9]*/
}
class Range {
    '{' (min:Integer)? KW_TO (max:Integer)? '}'
}
// === keywords === ----------------------------------------------------------------------------------------------------
@railway(false)
@style(keyword)
token {
    KW_MESSAGE  = 'message'
    KW_RESERVED = 'reserved'
    KW_ENUM     = 'enum'
    KW_TO       = 'to'
    KW_SERVICE  = 'service'
    KW_RPC      = 'rpc'
    KW_RETURNS  = 'returns'
    KW_OPTION   = 'option'
}
// === ignores === -----------------------------------------------------------------------------------------------------
@railway(false)
ignore class WhiteSpace {
    /\p{White_Space}+/
}
@style(comment)
ignore class Comment {
    | @comment_line('//')
}

