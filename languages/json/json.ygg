//?
grammar! json {"*.json"}
//?
import! "json_types.toml"
//? our json support comment starts with `//`
ignore! {WHITESPACE, NEWLINE, COMMENT}

//? entry point
program = value
//? 
value = 
    | object
    | array
    | number
    | string
    | boolean
    | null

//+?

//-
object _= "{" ~ @interleave(pair, ",", triling = false)? ~ "}"
pair   _= key ~ ":" ~ value
key     = string | number

//+?

//-
array = "[" ~ @interleave(value, ",") ~ "]"

//+?

//-
number = 

hex_literal = 0 ~ [xX] ~ [0-9a-fA-F]+
oct_literal = 0 ~ [oO] ~ [0-7]+
bin_literal = 0 ~ [bB] ~ [0-1]+

sign       @= '-' | '+';
dec_literal = 0 | [1-9] ~ [0-9]+


decimal_digits = /\d+/
signed_integer = sign ? decimal_digits
exponent_part = [eE]? ~ signed_integer
decimal_integer_literal = sign(0 | ([1-9] ~ decimal_digits ?))

decimal_literal = 
    | decimal_integer_literal ~ '.', optional(decimal_digits), optional(exponent_part)),
    | '.', decimal_digits, optional(exponent_part)),
    | decimal_integer_literal, optional(exponent_part))

//+?

//-
string: JsonString _=
    | '"' ~ '"'
    | '"' ~ string_content ~ '"'

string_content @= ([^\\"\n]+ | escape_sequence)+

escape_sequence @= '\\' | /(\"|\\|\/|b|f|n|r|t|u)/
escaped @= '\\' ~ [bfnrtu"/\\]

boolean: bool @= "true" | "false"
null   : void @= "null"


COMMENT = single_line_comment
single_line_comment = "//" ~ [.]*
